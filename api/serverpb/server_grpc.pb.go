// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.15.8
// source: server.proto

package serverpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageServer_Update_FullMethodName     = "/server.StorageServer/Update"
	StorageServer_UpdateMany_FullMethodName = "/server.StorageServer/UpdateMany"
	StorageServer_Metric_FullMethodName     = "/server.StorageServer/Metric"
	StorageServer_AllMetrics_FullMethodName = "/server.StorageServer/AllMetrics"
)

// StorageServerClient is the client API for StorageServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServerClient interface {
	// Update выполняет обновление единственной метрики.
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// UpdateMany выполняет обновления набора метрик.
	UpdateMany(ctx context.Context, in *UpdateManyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Metric возвращает описание метрики из хранилища.
	Metric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error)
	// AllMetrics описание всех метрик из хранилища.
	AllMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllMetricsResponse, error)
}

type storageServerClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServerClient(cc grpc.ClientConnInterface) StorageServerClient {
	return &storageServerClient{cc}
}

func (c *storageServerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageServer_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) UpdateMany(ctx context.Context, in *UpdateManyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, StorageServer_UpdateMany_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) Metric(ctx context.Context, in *MetricRequest, opts ...grpc.CallOption) (*MetricResponse, error) {
	out := new(MetricResponse)
	err := c.cc.Invoke(ctx, StorageServer_Metric_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServerClient) AllMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AllMetricsResponse, error) {
	out := new(AllMetricsResponse)
	err := c.cc.Invoke(ctx, StorageServer_AllMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServerServer is the server API for StorageServer service.
// All implementations must embed UnimplementedStorageServerServer
// for forward compatibility
type StorageServerServer interface {
	// Update выполняет обновление единственной метрики.
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	// UpdateMany выполняет обновления набора метрик.
	UpdateMany(context.Context, *UpdateManyRequest) (*emptypb.Empty, error)
	// Metric возвращает описание метрики из хранилища.
	Metric(context.Context, *MetricRequest) (*MetricResponse, error)
	// AllMetrics описание всех метрик из хранилища.
	AllMetrics(context.Context, *emptypb.Empty) (*AllMetricsResponse, error)
	mustEmbedUnimplementedStorageServerServer()
}

// UnimplementedStorageServerServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServerServer struct {
}

func (UnimplementedStorageServerServer) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStorageServerServer) UpdateMany(context.Context, *UpdateManyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMany not implemented")
}
func (UnimplementedStorageServerServer) Metric(context.Context, *MetricRequest) (*MetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Metric not implemented")
}
func (UnimplementedStorageServerServer) AllMetrics(context.Context, *emptypb.Empty) (*AllMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllMetrics not implemented")
}
func (UnimplementedStorageServerServer) mustEmbedUnimplementedStorageServerServer() {}

// UnsafeStorageServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServerServer will
// result in compilation errors.
type UnsafeStorageServerServer interface {
	mustEmbedUnimplementedStorageServerServer()
}

func RegisterStorageServerServer(s grpc.ServiceRegistrar, srv StorageServerServer) {
	s.RegisterService(&StorageServer_ServiceDesc, srv)
}

func _StorageServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageServer_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_UpdateMany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).UpdateMany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageServer_UpdateMany_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).UpdateMany(ctx, req.(*UpdateManyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_Metric_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).Metric(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageServer_Metric_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).Metric(ctx, req.(*MetricRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageServer_AllMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServerServer).AllMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageServer_AllMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServerServer).AllMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageServer_ServiceDesc is the grpc.ServiceDesc for StorageServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.StorageServer",
	HandlerType: (*StorageServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Update",
			Handler:    _StorageServer_Update_Handler,
		},
		{
			MethodName: "UpdateMany",
			Handler:    _StorageServer_UpdateMany_Handler,
		},
		{
			MethodName: "Metric",
			Handler:    _StorageServer_Metric_Handler,
		},
		{
			MethodName: "AllMetrics",
			Handler:    _StorageServer_AllMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
